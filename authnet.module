<?php

/**
 * @file
 * Authorize.net API
 */

/* ******************************************************************************
 * Constants
 * *****************************************************************************/

/**
 * Authorize.net transaction methods.
 */
define('AUTHNET_METHOD_AUTH_CAPTURE', 'AUTH_CAPTURE');
define('AUTHNET_METHOD_PRIOR_AUTH_CAPTURE', 'PRIOR_AUTH_CAPTURE');
define('AUTHNET_METHOD_AUTH_ONLY', 'AUTH_ONLY');
define('AUTHNET_METHOD_CAPTURE_ONLY', 'CAPTURE_ONLY');
define('AUTHNET_METHOD_CREDIT', 'CREDIT');
define('AUTHNET_METHOD_VOID', 'VOID');

/* ******************************************************************************
 * Includes
 * *****************************************************************************/

/**
 * Authorize.net object types
 */
require_once 'includes/authnet.types.inc';

/**
 * Authorize.net AIM
 */
require_once 'includes/authnet.aim.inc';

/**
 * Authorize.net CIM
 */
require_once 'includes/authnet.cim.inc';

/* ******************************************************************************
 * Drupal hooks
 * *****************************************************************************/

/**
 * Implementation of hook_menu().
 */
function authnet_menu() {
  $items['admin/settings/authnet'] = array(
    'title' => 'Authorize.net API',
    'description' => 'Authorize.net API module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authnet_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'authnet.pages.inc',
  );
  return $items;
}

/* ******************************************************************************
 * Path and include functions
 * *****************************************************************************/

/**
 * Determine the path to the Authorize.net PHP SDK library.
 *
 * @param $filename
 *   Boolean to determine whether or not the primary library filename should be appended to the path before it's returned. Defaults to FALSE.
 *
 * @return
 *   Returns the path to the library.
 *
 * @todo
 *   Make this flexible so it doesn't necessarily depend on the Libraries module.
 *   Look at Colorbox module's colorbox_get_path() for a good example.
 */
function authnet_sdk_path($filename = FALSE) {

  // Look for the Authorize.net library in the libraries directory.
  // The folder should be called 'anet_php_sdk', to match what exists on Authorize.net's site (http://developer.authorize.net/downloads).
  $path = libraries_get_path('anet_php_sdk');

  // Append the filename, if requested.
  if ($filename) {
    $path .= '/AuthorizeNet.php';
  }
  return $path;
}

/**
 * Include the Authorize.net SDK library code.
 */
function authnet_sdk_include() {
  static $loaded = FALSE;
  if (!$loaded) {

    // Load the library file.
    require_once(authnet_sdk_path(TRUE));

    // Remember that we loaded it already.
    $loaded = TRUE;
  }
}

/* ******************************************************************************
 * Helper functions
 * *****************************************************************************/

/**
 * Records error messages from an Authorize.net response to the screen and to the log.
 *
 * @param $response
 *   An Authorize.net response object.
 */
function _authnet_error($response) {

  // If the response object is an instance of AuthorizeNetCIM_Response...
  if ($response instanceof AuthorizeNetCIM_Response) {

    // If the response is an error...
    if ($response->isError()) {

      // Get the error message.
      $error = $response->getErrorMessage();
    }
  }

  // Or, if the response object is an instance of AuthorizeNetAIM_Response...
  elseif ($response instanceof AuthorizeNetAIM_Response) {

    // If the response is an error...
    if ($response->error) {

      // Get the error message.
      $error = $response->error_message;
    }
  }

  // If an error was found, record it.
  if (isset($error)) {

    // Print it to the screen, if Drupal's core error_level variable is greater than or equal to 1.
    if (variable_get('error_level', 1) >= 1) {
      drupal_set_message($error, 'error');
    }

    // Record it to watchdog.
    watchdog('authnet', $error);
  }
}

/**
 * Recursivley converts a SimpleXMLElement object to an array of keyed values,
 * with an optional ability to define non-unique properties that may exist in the XML and
 * ensure that they end up in arrays.
 *
 * @param $simplexml
 *   The SimpleXMLElement to copy from.
 * @param $nonunique
 *   An array of non-unique element indices. If a property is found in the $simplexml parameter with a non-unique index,
 *   this function will make sure that it is copied into an array so that the output is consistent whether or not one or many elements are included.
 *
 * @return
 *   Returns an array that the SimpleXMLElement values were copied to.
 *
 * @see uc_cim_profile_load()
 */
function _authnet_simplexml_to_array($simplexml, $nonunique = array()) {
  $array = array();
  foreach ((array) $simplexml as $index => $node) {

    // If the element is non-unique and there are less than 2 of them, make sure it ends up in an array regardless.
    if (in_array($index, $nonunique) && ($simplexml->$index->count() < 2)) {
      $node = array($node);
    }

    // Assign the element to the array. If the element is an object, recurse into it.
    $array[$index] = (is_object($node) || is_array($node)) ? _authnet_simplexml_to_array($node) : $node;
  }
  return $array;
}