<?php

/**
 * @file
 * Authorize.net API
 */

/* ******************************************************************************
 * Includes
 * *****************************************************************************/

/**
 * Authorize.net CIM
 */
require_once 'includes/authnet.cim.inc';

/* ******************************************************************************
 * Drupal hooks
 * *****************************************************************************/

/**
 * Implementation of hook_menu().
 */
function authnet_menu() {
  $items['admin/settings/authnet'] = array(
    'title' => 'Authorize.net API',
    'description' => 'Authorize.net API module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authnet_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'authnet.pages.inc',
  );
  return $items;
}

/* ******************************************************************************
 * Path and include functions
 * *****************************************************************************/

/**
 * Determine the path to the Authorize.net PHP SDK library.
 *
 * @param $filename
 *   Boolean to determine whether or not the primary library filename should be appended to the path before it's returned. Defaults to FALSE.
 *
 * @return
 *   Returns the path to the library.
 *
 * @todo
 *   Make this flexible so it doesn't necessarily depend on the Libraries module.
 *   Look at Colorbox module's colorbox_get_path() for a good example.
 */
function authnet_sdk_path($filename = FALSE) {

  // Look for the Authorize.net library in the libraries directory.
  // The folder should be called 'anet_php_sdk', to match what exists on Authorize.net's site (http://developer.authorize.net/downloads).
  $path = libraries_get_path('anet_php_sdk');

  // Append the filename, if requested.
  if ($filename) {
    $path .= '/AuthorizeNet.php';
  }
  return $path;
}

/**
 * Include the Authorize.net SDK library code.
 */
function authnet_sdk_include() {
  static $loaded = FALSE;
  if (!$loaded) {

    // Load the library file.
    require_once(authnet_sdk_path(TRUE));

    // Set the login id and transaction key as constants.
    define("AUTHORIZENET_API_LOGIN_ID", variable_get('authnet_login_id', ''));
    define("AUTHORIZENET_TRANSACTION_KEY", variable_get('authnet_transaction_key', ''));

    // Remember that we loaded it already.
    $loaded = TRUE;
  }
}

/* ******************************************************************************
 * Helper functions
 * *****************************************************************************/

/**
 * Records error messages from an Authorize.net response to the screen and to the log.
 *
 * @param $response
 *   An AuthorizeNetCIM_Response object.
 */
function _authnet_error($response) {
  if ($response->isError()) {

    // Get the error message.
    $error = $response->getErrorMessage();

    // Print it to the screen, if Drupal's core error_level variable is greater than or equal to 1.
    if (variable_get('error_level', 1) >= 1) {
      drupal_set_message($error, 'error');
    }

    // Record it to watchdog.
    watchdog('authnet', $error);
  }
}

/**
 * Recursively copies the contents of a SimpleXMLElement to another object.
 * This is necessary because the Authorize.net SDK returns SimpleXML objects,
 * rather than the specific AuthorizeNet* class that we need.
 *
 * @param $simplexml
 *   The SimpleXMLElement to convert.
 * @param &$object
 *   The object to copy to, passed by reference.
 *
 * @see uc_cim_profile_load(), uc_cim_profile_save()
 */
function _authnet_convert_simplexml($simplexml, &$object) {
  if ($simplexml instanceof SimpleXMLElement) {
    $vars = get_object_vars($simplexml);
    foreach ($vars as $key => $var) {
      /**
       * @todo
       * Need to be able to handle arrays. Not everything should become an object.
       */
      _authnet_convert_simplexml($var, $object->$key);
    }
  } else {
    $object = $simplexml;
  }
}