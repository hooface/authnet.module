<?php

/**
 * @file
 * Authorize.net CIM Entity
 */

/**
 * @todo
 * When customer profiles are created, add payment profiles too.
 * When customer profiles are updated, add/remove payment profiles.
 * When payment profiles are added/updated/deleted, do the same in the database.
 */

/* ******************************************************************************
 * Authnet hooks
 * *****************************************************************************/

/**
 * Implementation of hook_authnet_cim_profile_insert().
 */
function authnet_cim_entity_authnet_cim_profile_insert($customerProfile) {

  // Get the entity type and id.
  $entity = authnet_cim_entity_id_parse($customerProfile->merchantCustomerId);

  // If a type or id are empty, return.
  if (empty($entity['type']) || empty($entity['id'])) {
    return;
  }

  // Save the association to the database.
  authnet_cim_entity_profile_id_save($entity['type'], $entity['id'], $customerProfile->customerProfileId);

  // If there are payment profiles, save those too.
  if (!empty($customerProfile->paymentProfiles)) {
    foreach ($customerProfile->paymentProfiles as $payment_profile) {

      // Generate a payment profile database record from the payment profile.
      /**
       * @todo
       * This doesn't work super well. When hook_authnet_cim_profile_insert() is called, some of the important
       * payment profile information is no longer available, because Authorize.net doesn't return the full card
       * number or expiration date when payment profiles are loaded from it. The card number shouldn't be an issue,
       * because Authorize.net does return something like "XXXX0027" (if the last 4 digits are 0027), which will still
       * work with the authnet_cim_entity_payment_profile_new() function. However, it returns "XXXX" as the expiration date,
       * which doesn't work. So the main thing that is lost here is the expiration date.
       * This isn't a critical issue, as long as module developers that use authnet_cim_profile_save() are aware of it.
       * The workaround is to save the payment profile record separate from the customer profile, and save the payment
       * profile database record at the same time, when the information IS available.
       */
      $record = authnet_cim_entity_payment_profile_new($customerProfile->customerProfileId, $payment_profile);
      authnet_cim_entity_payment_profile_save($record);
    }
  }
}

/**
 * Implementation of hook_authnet_cim_profile_delete().
 */
function authnet_cim_entity_authnet_cim_profile_delete($customerProfileId) {

  // Delete the customer and payment profiles from the databse.
  authnet_cim_entity_profile_id_delete($customerProfileId);
}

/* ******************************************************************************
 * Entity profile id functions
 * *****************************************************************************/

/**
 * Get a customer profile id, based on an entity type and id.
 *
 * @param $type
 *   The Drupal entity type.
 * @param $id
 *   The Drupal entity id.
 *
 * @return
 *   Returns a customer profile id for the given entity type and id, if available. FALSE otherwise.
 */
function authnet_cim_entity_profile_id_load($type, $id) {

  // Look up the customer profile id.
  $customer_profile_id = db_result(db_query('SELECT customer_profile_id FROM {authnet_cim_entity} WHERE type="%s" AND id=%d', array($type, $id)));

  // Return FALSE if a customer profile id wasn't found.
  if (!$customer_profile_id) {
    return FALSE;
  }

  return $customer_profile_id;
}

/**
 * Get a customer profile, based on an entity type and id.
 *
 * @param $type
 *   The Drupal entity type.
 * @param $id
 *   The Drupal entity id.
 *
 * @return
 *   Returns the Authorize.net customer profile for the given entity type and id, if available. FALSE otherwise.
 */
function authnet_cim_entity_profile_load($type, $id) {

  // Look up the customer profile id.
  $customer_profile_id = authnet_cim_entity_profile_id_load($type, $id);

  // Return FALSE if a customer profile id wasn't found.
  if (!$customer_profile_id) {
    return FALSE;
  }

  // Return the loaded customer profile.
  return authnet_cim_profile_load($customer_profile_id);
}

/**
 * Save an entity's customer profile id to the database.
 *
 * @param $type
 *   The Drupal entity type.
 * @param $id
 *   The Drupal entity id.
 * @param $customer_profile_id
 *   The Authorize.net customer profile id.
 */
function authnet_cim_entity_profile_id_save($type, $id, $customer_profile_id) {

  // Build the record.
  $record = array(
    'type' => $type,
    'id' => $id,
    'customer_profile_id' => $customer_profile_id,
  );

  // Write the record.
  drupal_write_record('authnet_cim_entity', $record);
}

/**
 * Delete a customer profile and their payment profiles from the database.
 *
 * @param $customer_profile_id
 *   The Authorize.net customer profile id.
 */
function authnet_cim_entity_profile_id_delete($customer_profile_id) {

  // Delete the customer profile from the database.
  db_query('DELETE FROM {authnet_cim_entity} WHERE customer_profile_id=%d', $customer_profile_id);

  // Delete all of the customer's payment profiles from the database.
  db_query('DELETE FROM {authnet_cim_entity_payment_profile} WHERE customer_profile_id=%d', $customer_profile_id);
}

/* ******************************************************************************
 * Payment profile functions
 * Note that these functions only deal with the database records and the fields
 * they contain. They do not contact Authorize.net, so most of the payment
 * profile information is not included.
 * *****************************************************************************/

/**
 * Generate a database record array, optionally from an AuthorizeNetPaymentProfile object.
 */
function authnet_cim_entity_payment_profile_new($customer_profile_id = NULL, $payment_profile = NULL) {

  // Put together an empty record.
  $record = array(
    'pid' => NULL,
    'payment_profile_id' => '',
    'customer_profile_id' => '',
    'cc_last_four' => '',
    'cc_type' => '',
    'cc_exp_year' => '',
    'cc_exp_month' => '',
  );

  // If a payment profile is supplied, fill in the appropriate values.
  if ($customer_profile_id && $payment_profile) {
    $record['customer_profile_id'] = $customer_profile_id;
    $record['payment_profile_id'] = $payment_profile->customerPaymentProfileId;

    // If the payment profile is a credit card...
    if (!empty($payment_profile->payment->creditCard->cardNumber)) {

      // Trim the card number to the last 4 digits.
      $record['cc_last_four'] = substr($payment_profile->payment->creditCard->cardNumber, -4);

      // Parse the expiration date. A valid date will be in the format 'YYYY-MM'. Ignore invalid dates.
      $expiration_date = explode('-', $payment_profile->payment->creditCard->expirationDate);
      if (count($expiration_date) == 2) {
        $record['cc_exp_month'] = $expiration_date[1];
        $record['cc_exp_year'] = $expiration_date[0];
      }
    }
  }

  return $record;
}

/**
 * Load a payment profile id from the database, given a pid.
 *
 * @param $pid
 *  The id of the payment profile record to load.
 *
 * @return
 *   Returns the payment profile id.
 */
function authnet_cim_entity_payment_profile_id_load($pid) {

  // Load the payment profile from the database.
  return db_result(db_query('SELECT payment_profile_id FROM {authnet_cim_entity_payment_profile} WHERE pid=%d', $pid));
}

/**
 * Load a payment profile record from the database.
 *
 * @param $payment_profile_id
 *  The id of the payment profile record to load.
 *
 * @return
 *   Returns the payment profile record.
 */
function authnet_cim_entity_payment_profile_load($payment_profile_id) {

  // Load the payment profile from the database.
  $payment_profile = db_fetch_array(db_query('SELECT * FROM {authnet_cim_entity_payment_profile} WHERE payment_profile_id=%d', $payment_profile_id));

  // If the last four digits of the credit card number are less than four digits, prepend zeros.
  if ($payment_profile && count($payment_profile['cc_last_four']) < 4) {
    $payment_profile['cc_last_four'] = str_pad($payment_profile['cc_last_four'], 4, '0', STR_PAD_LEFT);
  }

  return $payment_profile;
}

/**
 * Save a payment profile record to the database.
 *
 * @param payment_profile
 *   The payment profile record to save.
 */
function authnet_cim_entity_payment_profile_save($payment_profile) {
  $update = array();
  if (isset($payment_profile['pid']) && !empty($payment_profile['pid'])) {
    $update[] = 'pid';
  }
  drupal_write_record('authnet_cim_entity_payment_profile', $payment_profile, $update);
}

/**
 * Delete a payment profile record from the database.
 *
 * @param $payment_profile_id
 *   The id of the payment profile to delete.
 */
function authnet_cim_entity_payment_profile_delete($payment_profile_id) {
  db_query('DELETE FROM {authnet_cim_entity_payment_profile} WHERE payment_profile_id=%d', $payment_profile_id);
}

/* ******************************************************************************
 * Helper functions
 * *****************************************************************************/

/**
 * Split an Authorize.net customer profile's merchant customer id into a type and id, based on the expected format: "[type]:[id]" (ie: "user:1").
 */
function authnet_cim_entity_id_parse($id) {

  // Create an array with empty values.
  $entity = array(
    'type' => '',
    'id' => '',
  );

  // Make sure the id isn't empty.
  if (!empty($id)) {

    // Explode the id at the colon.
    $data = explode(':', $id);

    // If the explosion was successful, and there are exactly two parts, fill in the data.
    if (count($data) == 2) {
      $entity['type'] = $data[0];  // The first part is the entity type.
      $entity['id'] = $data[1];  // The second part is the entity id.
    }
  }

  // Return the entity information.
  return $entity;
}