<?php

/**
 * @file
 * Authorize.net - Ubercart Integration
 * A replacement for uc_authorizenet. Process payments using Authorize.net 
 */

/* ******************************************************************************
 * Drupal hooks
 * *****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function authnet_uc_form_alter(&$form, &$form_state, $form_id) {

  // Alter the credit card terminal form in the order admin interface (/admin/store/orders/%order-id/credit)
  if ($form_id == 'uc_credit_terminal_form') {

    // Load the order.
    // Bail if no order or if order doesn't have a user
    $order = uc_order_load($form['order_id']['#value']);
    if (empty($order) || empty($order->uid)) return;

    // Load the customer profile id.
    $customer_profile_id = authnet_cim_entity_profile_id_load('user', $order->uid);

    // Load the customer's payment profiles.
    $payment_profiles = authnet_cim_entity_customer_payment_profiles_load($customer_profile_id);

    // Set the weight of the 'amount' field so that it is at the top.
    $form['amount']['#weight'] = -2;

    // Create a new fieldset for the existing payment profiles.
    $form['authnet_payment_profiles'] = array(
      '#type' => 'fieldset',
      '#title' => t('Customer payment profiles'),
      '#description' => t('Select from the customer\'s existing payment profiles below. To edit them, go to the ' . l('customer\'s billing list', 'user/' . $order->uid . '/billing') . '.'),
      '#weight' => -1,
    );

    // If the customer doesn't have any payment profiles...
    if (empty($payment_profiles)) {

      // Change the fieldset description.
      $form['authnet_payment_profiles']['#description'] = t('The customer assigned to this order doesn\'t have any payment profiles. Use the form below to add one.');
    }

    // If the customer does have payment profiles, display them.
    else {

      // Load the customer's default payment profile.
      $default_pid = authnet_cim_entity_customer_payment_profile_default($customer_profile_id);

      // Radio select list of payment profiles
      $form['authnet_payment_profiles']['payment_profile'] = array(
        '#type' => 'radios',
        '#options' => authnet_ui_payment_profile_options($customer_profile_id),
        '#default_value' => $default_pid,
      );

      // Buttons
      $form['authnet_payment_profiles']['charge'] = array(
        '#type' => 'submit',
        '#value' => t('Charge amount to this profile'),
        '#submit' => array('authnet_uc_payment_profile_charge_submit'),
      );
    }

    // Make the 'specify_card' fieldset collapsed by default, if the customer has payment profiles.
    if (!empty($payment_profiles)) {
      $form['specify_card']['#collapsible'] = TRUE;
      $form['specify_card']['#collapsed'] = TRUE;
    }

    // Set the weight of the 'cc_data' fieldset so that it is at the top.
    $form['specify_card']['cc_data']['#weight'] = -2;

    // Add a button for adding a credit card to a customer profile.
    $form['specify_card']['add_profile'] = array(
      '#type' => 'submit',
      '#value' => 'Add credit card to customer',
      '#validate' => array('authnet_uc_payment_profile_add_validate'),
      '#submit'=> array('authnet_uc_payment_profile_add_submit'),
      '#weight' => -1,
      '#suffix' => '<br /><br />Use the buttons below to process this transaction without using the customer\'s payment profiles.<br /><br />',
    );

    // If the 'references' fieldset is available, change the language to be more accurate.
    if (isset($form['references'])) {
      $form['references']['#title'] = t('Order references');
      $form['references']['#description'] = t('Use the available buttons in this fieldset to select and act on a reference that has been associated with this order.');
    }
  }
}

/**
 * Implements hook_theme().
 */
function authnet_uc_theme() {
  return array(
    'authnet_uc_payment_method_credit_checkout_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/* ******************************************************************************
 * Ubercart hooks
 * *****************************************************************************/

/**
 * Implementation of hook_payment_gateway().
 */
function authnet_uc_payment_gateway() {
  $gateways[] = array(
    'id' => 'authnet',
    'title' => t('Authorize.net'),
    'description' => t('Process credit card payments using Authorize.net.'),
    'settings' => 'authnet_uc_settings_form',
    'credit' => 'authnet_uc_charge',
    'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_PRIOR_AUTH_CAPTURE, UC_CREDIT_AUTH_CAPTURE, UC_CREDIT_REFERENCE_SET, UC_CREDIT_REFERENCE_TXN),
  );

  return $gateways;
}

/**
 * Implementation of hook_payment_method_alter().
 */
function authnet_uc_payment_method_alter(&$methods) {

  /**
   * Replace the callback function of the 'credit' payment method with our own.
   * We do this so that we can offer users the ability to choose an existing card.
   * See authnet_uc_payment_method_credit() below.
   */
  if (!empty($methods)) {
    foreach ($methods as &$method) {
      if ($method['id'] == 'credit') {

        // Replace the callback function with our own.
        $method['callback'] = 'authnet_uc_payment_method_credit';

        // Stop the foreach loop.
        break;
      }
    }
  }
}

/* ******************************************************************************
 * Form functions
 * *****************************************************************************/

/**
 * Payment gateway settings form.
 */
function authnet_uc_settings_form() {
  module_load_include('inc', 'authnet_uc', 'includes/authnet_uc.pages');
  return _authnet_uc_settings_form();
}

/**
 * Credit payment method checkout form.
 */
function authnet_uc_payment_method_credit_checkout_form($form_state, $order, $customer_profile_id) {

  // Get the list of payment profile options for this customer.
  $options = authnet_ui_payment_profile_options($customer_profile_id);

  // Add an option for setting up a new card.
  $options['new'] = t('Use a new card...');

  // Display the list of radio buttons.
  $form['select'] = array(
    '#type' => 'radios',
    '#title' => t('Choose an existing credit card or use a new one'),
    '#options' => $options,
    '#required' => TRUE,
  );

  // Load the customer's default payment profile.
  $default_pid = authnet_cim_entity_customer_payment_profile_default($customer_profile_id);

  // If the customer has a default payment profile, select that first.
  if ($default_pid) {
    $form['select']['#default_value'] = $default_pid;
  }

  // Otherwise, select 'Add a new card'.
  else {
    $form['select']['#default_value'] = 'new';
  }

  // Append the old uc_payment_method_credit_form().
  $form += uc_payment_method_credit_form($form_state, $order);

  // Add a checkbox to give the customer the choice of saving the card or not.
  $form['save'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save this credit card for later use.'),
    '#default_value' => 1,
  );

  // Return the form.
  return $form;
}

/**
 * Submit function for the order admin payment profile charge button.
 */
function authnet_uc_payment_profile_charge_submit($form, &$form_state) {

  // Get the pid of the payment profile that was selected.
  $pid = $form_state['values']['payment_profile'];

  // If no payment profile was selected, don't do anything.
  if (!$pid) {
    return;
  }

  // Load the customer's payment profile information.
  $payment_profile_id = authnet_cim_entity_payment_profile_id_load($pid);
  $payment_profile = authnet_cim_entity_payment_profile_load($payment_profile_id);

  // Build the data array passed on to the payment gateway.
  $data = array();

  // Set the transaction type to "Authorize and Capture"
  $data['txn_type'] = UC_CREDIT_AUTH_CAPTURE;

  // Set the Authorize.net customer profile id and payment profile id to charge to.
  $data['customer_profile_id'] = $payment_profile['customer_profile_id'];
  $data['payment_profile_id'] = $payment_profile_id;

  // Process the payment
  $result = uc_payment_process('credit', $form_state['values']['order_id'], $form_state['values']['amount'], $data, TRUE, NULL, FALSE);

  // If the payment was processed successfully...
  if ($result) {
    drupal_set_message(t('The credit card was processed successfully. See the admin comments for more details.'));
  }

  // If an error occurred during processing...
  else {
    drupal_set_message(t('There was an error processing the credit card. See the admin comments for details.'), 'error');
  }

  // Redirect to the order view.
  $form_state['redirect'] = 'admin/store/orders/'. $form_state['values']['order_id'];
}

/**
 * Validation function for adding a new credit card to a customer from the order admin credit card terminal.
 */
function authnet_uc_payment_profile_add_validate($form, &$form_state) {

  // Load the order information.
  $order = uc_order_load($form_state['values']['order_id']);

  // Bail if no order was found.
  if (!$order) {
    return;
  }

  // Make sure that all the necessary billing fields are available on the order.
  $required_billing_fields = array(
    'first name' => $order->billing_first_name,
    'last name' => $order->billing_last_name,
    'address' => trim($order->billing_street1 . ' ' . $order->billing_street2),
    'city' => $order->billing_city,
    'state/province' => uc_zone_get_by_id($order->billing_zone),
    'zip/postal code' => $order->billing_postal_code,
    'country' => uc_country_get_by_id($order->billing_country),
  );
  $missing = array();
  foreach ($required_billing_fields as $name => $field) {
    if (empty($field)) {
      $missing[] = $name;
    }
  }
  if (!empty($missing)) {
    form_set_error('', 'The order must have a valid billing address in order to add a new credit card. Please add missing fields to the order\'s billing address and try again. The following fields are missing: ' . implode(', ', $missing));
  }

  // Make sure that all the necessary credit card fields are available.
  $required_cc_fields = array(
    'card type' => $form_state['values']['cc_data']['cc_type'],
    'card number' => $form_state['values']['cc_data']['cc_number'],
    'expiration month' => $form_state['values']['cc_data']['cc_exp_month'],
    'expiration year' => $form_state['values']['cc_data']['cc_exp_year'],
  );
  $missing = array();
  foreach ($required_cc_fields as $name => $field) {
    if (empty($field)) {
      $missing[] = $name;
    }
  }
  if (!empty($missing)) {
    form_set_error('', 'Please fill in all of the credit card fields. The following fields are missing: ' . implode(', ', $missing));
  }

  // Save the order object in the form state so we can use it in the submit function.
  $form_state['values']['order'] = $order;
}

/**
 * Submit function for adding a new credit card to a customer from the order admin credit card terminal.
 */
function authnet_uc_payment_profile_add_submit($form, &$form_state) {

  // Get the order object from the form state.
  $order = $form_state['values']['order'];

  // Make sure the order has a user.
  if (!$order->uid) {
    return;
  }

  // Load the user's customer profile id.
  $customer_profile_id = authnet_cim_entity_profile_id_load('user', $order->uid);

  // If the user doesn't have a customer profile, create one.
  if (!$customer_profile_id) {
    $profile = authnet_user_customer_profile_new($order->uid);
    $customer_profile_id = $profile->customerProfileId;
  }

  // Assemble the new payment profile information.
  $values = array(
    'customerType' => !empty($order->billing_company) ? 'business' : 'individual',
    'billTo' => array(
      'firstName' => check_plain($order->billing_first_name),
      'lastName' => check_plain($order->billing_last_name),
      'company' => check_plain($order->billing_company),
      'address' => check_plain(trim($order->billing_street1 . ' ' . $order->billing_street2)),
      'city' => check_plain($order->billing_city),
      'state' => check_plain(uc_zone_get_by_id($order->billing_zone)),
      'zip' => check_plain($order->billing_postal_code),
      'country' => uc_country_get_by_id($order->billing_country),
      'phoneNumber' => check_plain($order->billing_phone),
      'faxNumber' => '',
    ),
    'payment' => array(
      'creditCard' => array(
        'cardNumber' => check_plain($form_state['values']['cc_data']['cc_number']),
        'expirationDate' => check_plain(trim($form_state['values']['cc_data']['cc_exp_year'] . '-' . str_pad($form_state['values']['cc_data']['cc_exp_month'], 2, '0'))),
        'cardCode' => check_plain($form_state['values']['cc_data']['cc_cvv']),
      ),
    ),
  );

  // Create a new payment profile with the values and send it to Authorize.net.
  $payment_profile = authnet_payment_profile_new($values);
  authnet_cim_payment_profile_save($customer_profile_id, $payment_profile);

  // If the profile was saved successfully, load it from the database and resave it to include the credit card type.
  if ($payment_profile->customerPaymentProfileId) {

    // Load the record.
    $record = authnet_cim_entity_payment_profile_load($payment_profile->customerPaymentProfileId);

    // Add the credit card type.
    $record['cc_type'] = check_plain($form_state['values']['cc_data']['cc_type']);

    // Save the record.
    authnet_cim_entity_payment_profile_save($record);
  }
}

/* ******************************************************************************
 * Theme functions
 * *****************************************************************************/

/**
 * Themes the "add a credit card" form to be in a compact table.
 */
function theme_authnet_uc_payment_method_credit_checkout_form($form) {

  // Render the radio select list.
  $output = drupal_render($form['select']);

  // Pass-through to the original theme_uc_payment_method_credit_form().
  $output .= theme_uc_payment_method_credit_form($form);

  // Render the rest of the form.
  $output .= '<div style="text-align: center;">' . drupal_render($form['save']) . '</div>';

  // Return the rendered form.
  return $output;
}

/* ******************************************************************************
 * Callbacks
 * *****************************************************************************/

/**
 * Callback for payment gateway settings.
 */
function authnet_uc_charge($order_id, $amount, $data) {
  module_load_include('inc', 'authnet_uc', 'includes/authnet_uc.charge');
  return _authnet_uc_charge($order_id, $amount, $data);
}

/**
 * Replacement callback for the credit payment method.
 * The goal of this function is to act as a simple wrapper around the uc_credit's normal payment method callback: uc_payment_method_credit().
 * This function is called first, does the stuff it needs to do, and in most cases passes the call of to uc_payment_method_credit().
 *
 * See authnet_uc_payment_method_alter() above.
 */
function authnet_uc_payment_method_credit($op, &$arg1, $silent = FALSE) {

  // If the $op is 'cart-details' it means we're rendering the checkout form.
  if ($op == 'cart-details') {

    // Get information about the current user.
    global $user;

    // If the user is logged in and has a customer profile...
    if ($user->uid && $customer_profile_id = authnet_cim_entity_profile_id_load('user', $user->uid)) {

      // Return our custom form, stripped for Ubercart's checkout form.
      $details = drupal_get_form('authnet_uc_payment_method_credit_checkout_form', $arg1, $customer_profile_id);
      return uc_strip_form($details);
    }
  }

  // If the above code hasn't returned something already, pass-through to to original uc_payment_method_credit() function.
  return uc_payment_method_credit($op, $arg1, $silent);
}