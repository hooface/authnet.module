<?php

/**
 * @file
 * Authorize.net - Ubercart Integration
 * A replacement for uc_authorizenet. Process payments using Authorize.net 
 */

/* ******************************************************************************
 * Drupal hooks
 * *****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function authnet_uc_form_alter(&$form, &$form_state, $form_id) {

  // Alter the credit card terminal form in the order admin interface (/admin/store/orders/%order-id/credit)
  if ($form_id == 'uc_credit_terminal_form') {

    // Load the order.
    // Bail if no order or if order doesn't have a user
    $order = uc_order_load($form['order_id']['#value']);
    if (empty($order) || empty($order->uid)) return;

    // Load the customer profile id.
    $customer_profile_id = authnet_cim_entity_profile_id_load('user', $order->uid);

    // Load the customer's payment profiles.
    $payment_profiles = authnet_cim_entity_customer_payment_profiles_load($customer_profile_id);

    // Set the weight of the 'amount' field so that it is at the top.
    $form['amount']['#weight'] = -2;

    // Create a new fieldset for the existing payment profiles.
    $form['authnet_payment_profiles'] = array(
      '#type' => 'fieldset',
      '#title' => t('Customer payment profiles'),
      '#description' => t('Select from the customer\'s existing payment profiles below. To edit them, go to the ' . l('customer\'s billing list', 'user/' . $order->uid . '/billing') . '.'),
      '#weight' => -1,
    );

    // If the customer doesn't have any payment profiles...
    if (empty($payment_profiles)) {

      // Change the fieldset description.
      $form['authnet_payment_profiles']['#description'] = t('The customer assigned to this order doesn\'t have any payment profiles. Use the form below to add one.');
    }

    // If the customer does have payment profiles, display them.
    else {

      // Load the customer's default payment profile.
      $default_pid = authnet_cim_entity_customer_payment_profile_default($customer_profile_id);

      // Radio select list of payment profiles
      $form['authnet_payment_profiles']['payment_profile'] = array(
        '#type' => 'radios',
        '#options' => authnet_ui_payment_profile_options($customer_profile_id),
        '#default_value' => $default_pid,
      );

      // Buttons
      $form['authnet_payment_profiles']['charge'] = array(
        '#type' => 'submit',
        '#value' => t('Charge amount to this profile'),
        '#submit' => array('authnet_uc_payment_profile_charge_submit'),
      );
    }

    // Make the 'specify_card' fieldset collapsed by default, if the customer has payment profiles.
    if (!empty($payment_profiles)) {
      $form['specify_card']['#collapsible'] = TRUE;
      $form['specify_card']['#collapsed'] = TRUE;
    }

    // Set the weight of the 'cc_data' fieldset so that it is at the top.
    $form['specify_card']['cc_data']['#weight'] = -2;

    // Add a checkbox for saving a credit card to the customer profile.
    $form['specify_card']['save_card'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add this credit card to the customer\'s payment profiles.'),
      '#description' => t('When this is checked, the buttons below it will work normally, but they will also save the credit card to the customer\'s list of payment profiles above. The only exception is the "Set reference" button, which will only add the new customer payment profile. If you want to "Set a reference" on this order alone, leave this unchecked.'),
      '#weight' => -1,
    );

    // If the 'references' fieldset is available, change the language to be more accurate.
    if (isset($form['references'])) {
      $form['references']['#title'] = t('Order references');
      $form['references']['#description'] = t('Use the available buttons in this fieldset to select and act on a reference that has been associated with this order.');
    }

    // Add a validation function.
    $form['#validate'][] = 'authnet_uc_payment_profile_add_validate';
  }
}

/**
 * Implements hook_theme().
 */
function authnet_uc_theme() {
  return array(
    'authnet_uc_payment_method_credit_checkout_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/* ******************************************************************************
 * Ubercart hooks
 * *****************************************************************************/

/**
 * Implementation of hook_payment_gateway().
 */
function authnet_uc_payment_gateway() {
  $gateways[] = array(
    'id' => 'authnet',
    'title' => t('Authorize.net'),
    'description' => t('Process credit card payments using Authorize.net.'),
    'settings' => 'authnet_uc_settings_form',
    'credit' => 'authnet_uc_charge',
    'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_PRIOR_AUTH_CAPTURE, UC_CREDIT_AUTH_CAPTURE, UC_CREDIT_REFERENCE_SET, UC_CREDIT_REFERENCE_TXN),
  );

  return $gateways;
}

/**
 * Implementation of hook_payment_method_alter().
 */
function authnet_uc_payment_method_alter(&$methods) {

  /**
   * Replace the callback function of the 'credit' payment method with our own.
   * We do this so that we can offer users the ability to choose an existing card.
   * See authnet_uc_payment_method_credit() below.
   */
  if (!empty($methods)) {
    foreach ($methods as &$method) {
      if ($method['id'] == 'credit') {

        // Replace the callback function with our own.
        $method['callback'] = 'authnet_uc_payment_method_credit';

        // Stop the foreach loop.
        break;
      }
    }
  }
}

/* ******************************************************************************
 * Form functions
 * *****************************************************************************/

/**
 * Payment gateway settings form.
 */
function authnet_uc_settings_form() {
  module_load_include('inc', 'authnet_uc', 'includes/authnet_uc.pages');
  return _authnet_uc_settings_form();
}

/**
 * Credit payment method checkout form.
 */
function authnet_uc_payment_method_credit_checkout_form($form_state, $order, $customer_profile_id) {

  // Start with an empty form.
  $form = array();

  // If a customer profile id is provided...
  if ($customer_profile_id) {

    // Get the list of payment profile options for this customer.
    $options = authnet_ui_payment_profile_options($customer_profile_id);

    // If the user has payment profiles, display them in a radio select list.
    if (!empty($options)) {

      // Add an option for setting up a new card.
      $options['new'] = t('Use a new card...');

      // Display the list of radio buttons.
      $form['cc_select'] = array(
        '#type' => 'radios',
        '#title' => t('Choose an existing credit card or use a new one'),
        '#options' => $options,
        '#required' => TRUE,
      );

      // If a payment profile id was already selected, use it as the default selection.
      if (!empty($order->payment_details['payment_profile_id'])) {

        // Load the payment profile.
        $payment_profile = authnet_cim_entity_payment_profile_load($order->payment_details['payment_profile_id']);

        // Set the default pid.
        $default_pid = $payment_profile['pid'];
      }

      // Otherwise, try to load the customer's default payment profile.
      else {
        $default_pid = authnet_cim_entity_customer_payment_profile_default($customer_profile_id);
      }

      // If a default payment profile id is set, select it as the default value.
      if ($default_pid) {
        $form['cc_select']['#default_value'] = $default_pid;
      }

      // Otherwise, select 'Add a new card'.
      else {
        $form['cc_select']['#default_value'] = 'new';
      }
    }
  }

  // Append the old uc_payment_method_credit_form().
  $form += uc_payment_method_credit_form($form_state, $order);

  // Add a checkbox to give the customer the choice of saving the card or not.
  $form['cc_save'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save this credit card for later use.'),
    '#default_value' => 1,
  );

  // Return the form.
  return $form;
}

/**
 * Submit function for the order admin payment profile charge button.
 */
function authnet_uc_payment_profile_charge_submit($form, &$form_state) {

  // Get the pid of the payment profile that was selected.
  $pid = $form_state['values']['payment_profile'];

  // If no payment profile was selected, don't do anything.
  if (!$pid) {
    return;
  }

  // Load the payment profile id.
  $payment_profile_id = authnet_cim_entity_payment_profile_id_load($pid);

  // Build the data array passed on to the payment gateway.
  $data = array();

  // Set the transaction type to "Authorize and Capture"
  $data['txn_type'] = UC_CREDIT_AUTH_CAPTURE;

  // Set the Authorize.net payment profile id to charge to.
  $data['payment_profile_id'] = $payment_profile_id;

  // Process the payment
  $result = uc_payment_process('credit', $form_state['values']['order_id'], $form_state['values']['amount'], $data, TRUE, NULL, FALSE);

  // If the payment was processed successfully...
  if ($result) {
    drupal_set_message(t('The credit card was processed successfully. See the admin comments for more details.'));
  }

  // If an error occurred during processing...
  else {
    drupal_set_message(t('There was an error processing the credit card. See the admin comments for details.'), 'error');
  }

  // Redirect to the order view.
  $form_state['redirect'] = 'admin/store/orders/'. $form_state['values']['order_id'];
}

/**
 * Validation function for adding a new credit card to a customer from the order admin credit card terminal.
 */
function authnet_uc_payment_profile_add_validate($form, &$form_state) {

  // We are going to stash the 'save_card' value in a static variable function so that we can access it in the charge function.
  $data = array(
    'save_card' => FALSE,
  );

  // We only need validation if the 'save_card' checkbox was checked.
  if (!empty($form_state['values']['save_card'])) {

    // Set the data value to TRUE.
    $data['save_card'] = TRUE;

    // Load the order information.
    $order = uc_order_load($form_state['values']['order_id']);

    // Bail if no order was found.
    if (!$order) {
      return;
    }

    // Make sure that all the necessary billing fields are available on the order.
    $required_billing_fields = array(
      'first name' => $order->billing_first_name,
      'last name' => $order->billing_last_name,
      'address' => trim($order->billing_street1 . ' ' . $order->billing_street2),
      'city' => $order->billing_city,
      'state/province' => uc_zone_get_by_id($order->billing_zone),
      'zip/postal code' => $order->billing_postal_code,
      'country' => uc_country_get_by_id($order->billing_country),
    );
    $missing = array();
    foreach ($required_billing_fields as $name => $field) {
      if (empty($field)) {
        $missing[] = $name;
      }
    }
    if (!empty($missing)) {
      form_set_error('', 'The order must have a valid billing address in order to add a new credit card. Please add missing fields to the order\'s billing address and try again. The following fields are missing: ' . implode(', ', $missing));
    }

    // Make sure that all the necessary credit card fields are available.
    $required_cc_fields = array(
      'card type' => $form_state['values']['cc_data']['cc_type'],
      'card number' => $form_state['values']['cc_data']['cc_number'],
      'expiration month' => $form_state['values']['cc_data']['cc_exp_month'],
      'expiration year' => $form_state['values']['cc_data']['cc_exp_year'],
    );
    $missing = array();
    foreach ($required_cc_fields as $name => $field) {
      if (empty($field)) {
        $missing[] = $name;
      }
    }
    if (!empty($missing)) {
      form_set_error('', 'Please fill in all of the credit card fields. The following fields are missing: ' . implode(', ', $missing));
    }
  }

  // Stash the data in a static variable function for retrieval in the charge function.
  authnet_uc_charge_data_set($data);
}

/* ******************************************************************************
 * Theme functions
 * *****************************************************************************/

/**
 * Themes the "add a credit card" form to be in a compact table.
 */
function theme_authnet_uc_payment_method_credit_checkout_form($form) {

  // Render the radio select list.
  $output = drupal_render($form['cc_select']);

  // Pass-through to the original theme_uc_payment_method_credit_form().
  $output .= theme_uc_payment_method_credit_form($form);

  // Render the rest of the form.
  $output .= '<div style="text-align: center;">' . drupal_render($form['cc_save']) . '</div>';

  // Return the rendered form.
  return $output;
}

/* ******************************************************************************
 * Ubercart callbacks
 * *****************************************************************************/

/**
 * Callback for payment gateway settings.
 */
function authnet_uc_charge($order_id, $amount, $data) {
  module_load_include('inc', 'authnet_uc', 'includes/authnet_uc.charge');
  return _authnet_uc_charge($order_id, $amount, $data);
}

/**
 * Replacement callback for the credit payment method.
 * The goal of this function is to act as a simple wrapper around the uc_credit's normal payment method callback: uc_payment_method_credit().
 * This function is called first, does the stuff it needs to do, and in most cases passes the call of to uc_payment_method_credit().
 *
 * See authnet_uc_payment_method_alter() above.
 */
function authnet_uc_payment_method_credit($op, &$arg1, $silent = FALSE) {

  // Get information about the current user.
  global $user;

  // Switch through the operations.
  switch ($op) {

    // If the $op is 'cart-details' it means we're rendering the checkout form.
    case 'cart-details':

      // Attempt to load the user's customer profile id (it will be FALSE if they are not logged in, or don't have one).
      $customer_profile_id = authnet_cim_entity_profile_id_load('user', $user->uid);

      // Return our custom form, stripped for Ubercart's checkout form.
      $details = drupal_get_form('authnet_uc_payment_method_credit_checkout_form', $arg1, $customer_profile_id);
      return uc_strip_form($details);

    // If the $op is 'cart-process', then perform some extra processing if our custom form was used in $op == 'cart-details' above.
    case 'cart-process':

      // If cc_select is not 'new', proceed. (Otherwise we'll just let the original uc_payment_method_credit() function take it.)
      if (!empty($_POST['cc_select']) && $_POST['cc_select'] != 'new') {

        // Load the payment profile id, based on the pid (stored in cc_select).
        $payment_profile_id = authnet_cim_entity_payment_profile_id_load($_POST['cc_select']);

        // Check to be sure the user has access to this payment profile.
        if ($payment_profile_id && !authnet_user_access($user, $payment_profile_id)) {
          if (!$silent) {
            drupal_set_message(t('You do not have permission to use this payment profile. Please select one that belongs to you.'), 'error');
          }
          return FALSE;
        }

        // Save the payment profile id to the order's payment details.
        $arg1->payment_details = array(
          'payment_profile_id' => $payment_profile_id,
        );

        // Return TRUE.
        return TRUE;
      }

      // If a new card is being added, check to see if the user wants to save it.
      elseif ($_POST['cc_select'] == 'new') {

        // First, execute the normal function.
        $result = uc_payment_method_credit($op, $arg1, $silent);

        // Then, if that was successful, add our 'save_card' variable.
        if ($result) {

          // Create the save card variable.
          $save_card = $_POST['cc_save'] ? TRUE : FALSE;

          // Save it to the payment details on the order (this may not be necessary, but do it anyways for consistency).
          $arg1->payment_details['save_card'] = $save_card;

          // uc_payment_method_credit() also saves the payment details to the global session variable, encrypted, so that
          // they can be accessed across page loads. We need to make sure our $save_card variable is included in that too.
          if (!empty($_SESSION['sescrd'])) {

            // Initialize the encryption key and class.
            $key = uc_credit_encryption_key();
            $crypt = new uc_encryption_class();

            // Decrypt the payment details that were saved to the global session variable.
            $payment_details = unserialize(base64_decode($crypt->decrypt($key, $_SESSION['sescrd'])));

            // Add our variable.
            $payment_details['save_card'] = $save_card;

            // Encrypt and save it again.
            $_SESSION['sescrd'] = $crypt->encrypt($key, base64_encode(serialize($arg1->payment_details)));
          }
          return TRUE;
        }

        // If the normal function returned FALSE, do the same.
        else {
          return $result;
        }
      }
      break;

    // If the $op is 'cart-review', display information about the payment profile, if one was selected.
    case 'cart-review':

      // If the user selected a payment profile...
      if (!empty($arg1->payment_details['payment_profile_id'])) {

        // Assemble an array of review items.
        $review = array();

        // Load the payment profile record for theming.
        $payment_profile = authnet_cim_entity_payment_profile_load($arg1->payment_details['payment_profile_id']);

        // Add the saved card information.
        $review[] = array('title' => t('Saved card'), 'data' => theme('authnet_payment_profile', $payment_profile));

        // Return the review array.
        return $review;
      }
      break;
  }

  // If the above code hasn't returned something already, pass-through to to original uc_payment_method_credit() function.
  return uc_payment_method_credit($op, $arg1, $silent);
}

/* ******************************************************************************
 * Helper functions
 * *****************************************************************************/

/**
 * Get statically cached charge data.
 *
 * @see authnet_uc_charge()
 */
function authnet_uc_charge_data_get() {
  return authnet_uc_charge_data_set();
}

/**
 * Save a payment profile to a static variable for use later on in session.
 */
function authnet_uc_charge_data_set($new_data = NULL) {
  static $data = array();

  // If new data is passed in, cache it
  if ($new_data) {
    $data = $new_data;
  }

  return $data;
}