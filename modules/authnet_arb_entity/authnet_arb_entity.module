<?php

/**
 * @file
 * Authorize.net ARB Entity
 */

/* ******************************************************************************
 * Constants
 * *****************************************************************************/

/**
 * Authorize.net ARB Constants.
 */
define('AUTHNET_ARB_TOTAL_OCCURRENCES_UNLIMITED', 9999);


/* ******************************************************************************
 * Drupal hooks
 * *****************************************************************************/

/**
 * Implements hook_menu().
 */
function authnet_arb_entity_menu() {
  $items['authnet/silentpost'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'authnet_arb_entity_silentpost',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function authnet_arb_entity_form_authnet_settings_form_alter(&$form, &$form_state, $form_id) {
  // ARB settings
  $form['arb_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('ARB settings'),
    '#description' => t('These settings pertain to the Authorize.Net Automated Recurring Billing service.'),
  );
  $form['arb_settings']['authnet_arb_md5'] = array(
    '#type' => 'textfield',
    '#title' => t('MD5 Hash'),
    '#default_value' => variable_get('authnet_arb_md5', ''),
    '#description' => t('The MD5 Hash is used to verify inbound Silent Post responses for transactions processed via ARB. More information in the <a href="@arb_guide">ARB Guide.pdf</a>', array('@arb_guide' => 'http://www.authorize.net/support/ARB_guide.pdf')),
  );
}

/* ******************************************************************************
 * Database functions
 * *****************************************************************************/

/**
 * Load an ARB subscription from the database.
 *
 * @param $subscription_id
 *  The ARB subscription id to load.
 *
 * @return
 *   Returns an ARB record.
 */
function authnet_arb_entity_load($subscription_id) {
  $query = db_query("SELECT * FROM {authnet_arb_entity} WHERE subscription_id = :subscription_id", array(':subscription_id' => $subscription_id));
  $result = $query->fetchAssoc();
  return $result;
}

/**
 * Save an ARB transaction from Silent Post to the database.
 *
 * @param $subscription_id
 *   ARB subscription id.
 * @param $trans_id
 *   Transaction id from silent post.
 * @param $response_code
 *   Response code from silent post.
 */
function authnet_arb_entity_silentpost_save($subscription_id, $trans_id, $response_code) {

  // Build the record.
  $record = array(
    'subscription_id' => $subscription_id,
    'trans_id' => $trans_id,
    'response_code' => $response_code,
  );

  // Write the record.
  drupal_write_record('authnet_arb_transactions', $record);
}

/* ******************************************************************************
 * Silent POST functions
 * *****************************************************************************/

/**
 * Menu callback to process and verify an Authorize.net Silent POST.
 *
 * Verification must happen via Authorize.net MD5Hash or an
 * immediate HTTP response of 500 is sent.
 */
function authnet_arb_entity_silentpost () {
    $hash_key = variable_get('authnet_arb_md5', '');
    $post = array();

    // Process POST values for cleaning
    foreach ($_POST as $key => $value) {
      $post[check_plain($key)] = check_plain($value);
    }

    // Bail if not an ARB subscription or no hash key
    if (!isset($post['x_subscription_id']) || empty($hash_key)) {
      return;
    }

    // Verify the MD5Hash
    $verify = md5($hash_key . $post['x_trans_id'] . $post['x_amount']);
    $is_valid_transaction = (strtoupper($post['x_MD5_Hash']) === strtoupper($verify)) ? TRUE : FALSE;

    // Call modules passing POST data (plus subscription data) or bail
    if ($is_valid_transaction) {
      $append_post = authnet_arb_entity_load($post['x_subscription_id']);
      if (is_array($append_post)) {
        $post += $append_post;
      }
      authnet_arb_entity_silentpost_save($post['x_subscription_id'], $post['x_trans_id'], $post['x_response_code']);
      module_invoke_all('arb_silentpost', $post);
    }
    else {
      // @todo make a watchdog entry?
      drupal_send_headers();
      header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error', TRUE, 500);
      exit();
    }
}
